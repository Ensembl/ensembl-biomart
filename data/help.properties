EXAMPLES=\ # List mart databases \
         \n  list marts; \
         \n \
         \n # List all available datasets \
         \n list datasets all; \
         \n \
         \n # List datasets for a given mart \
         \n list datasets ensembl; \
         \n \
         \n # or \
         \n set mart ensembl; \
         \n list datasets; \
         \n \
         \n # sets dataset; \
         \n use msd.msd; \
         \n \
         \n # or, if mart is set \
         \n use msd; \
         \n \
         \n # now list availble attributes and filters; \
         \n list attributes; \
         \n list filters; \
         \n  \
         \n # <tab><tab> will do the same thing \
         \n # eg. get <tab><tab> where <tab><tab> \
         \n \
         \n # now a real query \
         \n using msd.msd get pdb_id where resolution_less_than < 0.9; \
         \n \
         \n # a join between two datasets \
         \n using ensembl.hsapiens_gene_ensembl get uniprot_swissprot_accession where with_non_synonymous_snp only as q; \
         \n using uniprot.uniprot get sptr_ac ,protein_name where sprot_id in q; \
         \n \
         \n # named procedures \
         \n using ensembl.hsapiens_gene_ensembl get uniprot_sptrembl where with_non_synonymous_snp only as genes; \
         \n execute procedure genes; \
         \n\
         \n using ? get pdb_id where resolution_less_than < ? as pdbSet;\
         \n execute procedure pdbSet(msd.msd,0.9);\
         \n\
         \n using ensembl.hsapiens_gene_ensembl get ensembl_gene_id where pdb in pdbSet(msd.msd,0.9); \
         \n\
         \n # outputting to a file \
         \n set output file='myfile'; \
         \n using ensembl.hsapiens_gene_ensembl get ensembl_gene_id; \
         \n \
         \n # back to interactive mode \
         \n unset output file; \
         \n\
         \n # count focus \
         \n use ensembl.hsapiens_gene_ensembl; \
         \n count_focus_from get ensembl_gene_id where with_non_synonymous_snp only; \
         \n\
         \n\n
describe=Brief Description - provides certain details on the type of object specified. \
	\n\nUsage - describe type <parameters>; \
	\n\nDetailed description - type can be one of the following: \
          \n- dataset: describes the filters and attributes available in a Dataset.  Parameter can be the name of a specific dataset, \
          \n           either absolute (sourceName.datasetname for the default view for a dataset, or sourcename.datasetname.configname \
          \n           for a particular view on a dataset), or relative to the environmental Mart (throws an error if not set). \
          \n- Mart: describes the connection parameters (without the password) for the given Mart. \
          \n- filter: describes a filter from the environmental Mart and DatasetConfig (throws an error if these are not set). \
          \n          Parameter must be a valid filter name. \
          \n- attribute: same as filter, but describes the given attribute. \
          \n- procedure: prints the MQL for a Named Procedure. \n\n
set=Brief Description - instructs MartShell to use certain settings for the rest of the session unless overridden. \
      \n\nUsage - set type <parameters>; \
      \n\nDetailed description - type can be one of the following: \
        \n- Mart: parameter must be a valid MartName, sets the environmental Mart. \
        \n        This can only be overridden with a call to set Mart, unset Mart, or use. \
        \n- dataset: parameter must be a valid dataset, either absolute (sourcename.datasetname for default \
        \n           view of datasetname, or sourcename.datasetname.configname for specific view on datasetname), or \
        \n           relative to the environmental Mart (throws an error if not set). The datasetname>martname syntax \
        \n           can also be used to set the environmental mart and dataset in one call. \
        \n           This can be overridden with a subsequent call to set or use. \
        \n- prompt: sets the main prompt (not the continuation prompt) to a user specified string. \
        \n          The string must be enclosed in quotes. Actually resolves to 'userString >'. \
        \n- output: values are optional, but, if provided, must consist of one or \
        \n          more key = 'value' pairs.  Keys must be either format, file, or separator. \
        \n          Values must be enclosed in single quotes. Multiple key, value pairs must be \
        \n          separated with commas. If no optional parameters are passed, the user is prompted for all\
        \n          possible settings to override for the session, with indications of defaults available. \
        \n          If any key = value parameters are passed, only these settings are overridden for the \
        \n          session. Note, for File output settings users can append output to an existing file by \
        \n          prepending the path with '>>' (eg, file = '>>myfile.txt' appends output to myfile.txt) \
        \n- verbose: values must be either 'on' or 'off'.  If no logging configuration URL was \
        \n           provided at shell startup, this turns verbosity (debug output) on, or off. \n\n
unset=Brief Description - removes the settings added by the set command. \
	\n\nUsage - unset type <paramters>; \
        \n\nDetailed description - type can be one of the following: \
          \n- Mart: Unsets the environmental Mart. \
          \n- dataset: unsets the environmental dataset. \
          \n- prompt: sets the main Prompt to the default 'MartShell >'. \
          \n- output: parameters are optional, but, if present, must be one of File, Format, or Separator. \
          \n          sets all, or a specified output setting to its default (STDOUT for File, Tabulated for Format, \
          \n          tab for Separator. \
          \n- verbose: sets verbose output (debug information) to the default (off) position, unless a logging \
          \n           system configuration file has been specified, whereby an error is thrown. \n\n
add=Brief Description - used to customise the martshell interface by introducing additional databases or configurations. \
       \n\nUsage - add type <parameters>; \
       \n\nDetailed description - type can be one of the following: \
         \n- Mart: parameters are optional, but must consist of one or more key = 'value' pairs \
         \n        (value must be enclosed in single quotes, but whitespace between key, =, and value is optional) \
         \n        followed by an optional 'as userSpecifiedName' parameter which sets the name used to refer \
         \n        to this Mart in other Shell commands (defaults to user/instanceName@host:port). \
         \n        keys can be one of: \
         \n        * host: sets the RDBMS host \
         \n        * port: sets the RDBMS port. Defaults to 3306 for mysql. \
         \n        * user: sets the RDBMS user \
         \n        * password: sets the RDBMS password (note, passwords are not encrypted). \
         \n        * instanceName: sets the name of the Mart Database Instance to query. \
         \n        * databaseType: sets the type of RDBMS server. \
         \n        * jdbcDriver: sets the name of the Java JDBC Driver class to use to manage JDBC connections. \
         \n        Note, if both databaseType and jdbcDriver are left blank, 'mysql' and 'com.mysql.jdbc.Driver' are used, respectively. \
         \n        If no key='value' pairs are entered during an interactive session, the user is prompted interactively for \
         \n        this information. If it is in batch mode and no key=value pairs are entered, an error is thrown. \
         \n        Each time a Mart is added, the environmental Mart is reset to the newly added Mart. \
         \n- datasets: adds all datasets contained in a MartRegistry.xml document. \
         \n            Parameters must be of the form 'from path|URL'. \
         \n- datasetconfig: Adds a specific dataset view from the filesystem.  Parameters must include \
         \n                 a valid path or URL to a DatasetConfig.xml file, and can optionally contain an 'as sourceName' \
         \n                 command that names the sourceName under which the datasetconfig is associated (defaults to 'userfiles'). \
         \n                 Note, datasetconfigs loaded from the file system are treated differently from those loaded from \
         \n                 mart sources. They can only be manipulated with their fully qualified pathname (eg. set, use, \
         \n                 using, update, remove), and a mart must be manually associated with them during the 'set', \
         \n                 'use', or 'using' command with the 'sourcename.datasetname.configname>martname' syntax. \n\n
remove=Brief description - used to remove databases or configurations \
       \n\nUsage: remove type <parameters>; \
       \n\nDetailed Description - type can be one of the following: \
         \n    - Mart: parameter must be the referring name set with the add Mart command, or the default. \
         \n       Will also remove any datasets downloaded with the mart. 'list Marts;' will show all Marts loaded. \
         \n    - datasets: paramaters are optional, but, if present, must be of the form 'from MartName' \
         \n       for a source of Datasets.  If no parameters are passed, all Datasets are removed from the \
         \n       current environmental Mart (an error is thrown if environment Mart not set).  \
         \n       If a parameter is passed, the Dataset(s) loaded from the given source is(are) removed. \
         \n    - dataset: Removes a dataset from the Shell (including any DatasetConfigs associated with it). \
         \n       parameter must be the name of a dataset, either absolute (sourcename.datasetname), or relative \
         \n       to the enrironmental mart (an error is thrown if this is not set). \
         \n    - datasetconfig: Removes a particular DatasetConfig from the Shell. Parameter must be the name \
         \n       of a loaded DatasetConfig (use 'list DatasetConfigs;'), either absolute (sourcename.datasetname.configname), \
         \n       or relative to the environmental mart and dataset (an error is thrown if these are not set.) \
         \n    - procedure: Removes a stored procedure from the environment. Parameter must be the name of a \
         \n       stored Named Procedure. \n\n
update=Brief Description - updates the datasets in MartShell with any changes made to the databases and any  \
	  \n                    dataset configuration files associated with them. \
	\n\nUsage - update type <parameters>; \
        \n\nDetailed Description - type can be one of the following: \
          \n    - datasets: parameters are optional, but, if present, must be of the form 'from MartName', where \
          \n      MartName is a valid Mart Source added with the add Mart command. \
          \n      updates the Dataset(s) loaded from the given source, or all datasets for the environmental Mart, \
          \n      if no parameters are supplied. \
          \n    - dataset: Updates the dataset (including any DatasetConfigs associated with it). \
          \n      parameter can be the name of a dataset, either relative to the current Environmental Mart (an error \
          \n      is thrown if not set), or absolute (sourcename.datasetname). If no parameter is passed, \
          \n      updates the environmental dataset within the environmental mart (throws an error if these are not \
          \n      set). The only way to update a dataset loaded from a file is to pass sourceName.datasetname or \
          \n      sourcename.datasetname.configname as a parameter. For datasets loaded from Marts, all Datasets will \
          \n      be updated.\n\n
list=Brief Description - this command is used to list objects that are available to use. \
      \n\nUsage - list type <parameters>; \
      \n\nDetailed Description - type can be one of the following: \
        \n- datasets: lists Datasets loaded.  Parameters can be 'all' which lists all datasets as \
        \n            sourceName.datasetname, or the name of a source (martName or fileName) from which datasets \
        \n            have been loaded, also listing as sourceName.datasetname. If no parameter is supplied, lists \
        \n            all datasets relative to the current environmental Mart (or throws an error if not set). \
        \n            Note, the only way to see a dataset loaded from a datasetconfig.xml file from the file system is \
        \n            to use 'all' or the fully qualified sourcename.datasetname syntax, where sourcename is the url \
        \n            or name provided during the add datasetconfig command. \
        \n- datasetconfigs: lists DatasetConfigs loaded. Parameters can be 'all' which lists all datasetconfigs as \
        \n                  sourceName.datasetname.configname, or the name of a source (fileName or martName) from which \
        \n                  datasetconfigs were loaded, also listing as sourceName.datasetName.configname. If no \
        \n                  parameter is passed, lists all datasetconfigs for the environmental Mart and Dataset (or \
        \n                  throws an error if either not set). \
        \n- filters: lists all filters, in alphabetical order, for the environmental Dataset, \
        \n           or throws an error if this has not been set with a 'set' or 'use' command. \
        \n- attributes: lists Attributes, in alphabetical order, for the environmental Dataset, \
        \n              or throws an error if this has not been set with a 'use' of 'set' command. \
        \n- procedures: lists the names of any Named Procedures that have been loaded. \
        \n- Marts: lists the names of all Marts loaded with the add Mart command. \n\n
execute=Brief Description - is used to run stored commands. \
	    \n\nUsage: execute type <parameter>: \
            \n\nDetailed Description - type can be one of the following: \
              \n- history: parameter must be of the form <n><,><y>. \
              \n           Executes the requested line ('exec n'), or series of lines ('exec n,y') \
              \n           and adds them to the history.  See 'help history' for information on \
              \n           the n,y system of denoting line numbers. \
              \n           Note, previous exec commands are ignored, to prevent infinite loops.\
              \n- procedure: parameter must be the name of a Named Procedure, optionally \
              \n             followed immediately by any bind variable expansions surrounded by parentheses. \
              \n             see 'help namedProcedures' for more details. \
              \n             eg. exec procedure mystuff; vs exec procedure mystuff(variable1,variable2). \
              \n             Executes the given stored procedure. \
              \n- Script: parameter must be a path or URL to a MQL script. \
              \n          Executes the MQL script. \n\n
environment=Brief Description - Prints information for all, or a specified part, of the shell environment. \
	    \n\nUsage: environment <type <parameters>>; \
            \n\nDetailed Description - If no type/parameters are passed, prints all environment settings. \
              \n                       type can be one of the following: \
              \n- Mart: prints the Mart connection information (not the name, but the \
              \n        server connection settings. \
              \n- output: parameters are optional, but must be one of File, Format, or Separator, if \
              \n          present.  Prints all, or a specified part, of the current environmental \
              \n          output settings. \
              \n- dataset: prints the name of the current environmental dataset relative to the environmental Mart, \
              \n           or absolute if it is one loaded from a file. \
              \n- datasetconfig: prints the name of the view relative to the environmental dataset \n\n
loadScript=Brief Description - loads lines from a script into the history. \
	          \n\nUsage - loadScript path|URL \
                  \n\nDetailed Description - MQL commands from the script pointed to by path or URL are loaded into \
                    \n                       the Shell history. These scripts are not executed and are made avialble \
		    \n                       for commandline editing. \n\n
saveToScript=Brief Description - writes MQL commands to a file. \
		    \n\nUsage - saveToScript <n><,><y> path|URL \
                    \n\nDetailed Description - Stores all lines ('saveToScript path') or a series of lines ('saveToScript n,y path') \
                      \n                       into a script file. See 'help history' for information on the n,y system of \
                      \n                       denoting line numbers. \n\n
history=Brief Desciption - recalls previously executed commands. \
	       \n\nUsage - history <n><,><y> \
               \n\nDetailed Description - show all history ('history'), or one or more lines from the history. \
               \n                       n denotes the number of the first line to include. \
               \n                       y denotes the number of the last line to include. \
               \n                       Either (but not both) can be blank, eg., 'n,' means all lines from n \
               \n                       to the end of the history while ',y' means all lines from the beginning \
               \n                       of the history to line y.\
               \n\nExamples - \
               \n\thistory 3,5; \tshows lines 3 to 5, inclusive, from the history. \
               \n\thistory 3,; \tshows all history lines, starting from line 3. \
               \n\thistory ,5;\tshows all history lines up to, including, line 5. \n\n
using=Brief Description - tells MartShell which dataset to use in a query. \
	   \n\nUsage - using <sourcename.>datasetname<.configname><>MartName> get ... \
           \n\nDetailed Description - The using clause is optional, but, if it is not present, a Dataset must \
             \n                       have been set with the 'use' or 'set' command, or the -d switch to the Shell. \
             \n                       datasetname must match the name of a Dataset provided by the MartConfiguration system. \
             \n                       Datasetname can be absolute (datasource.dataset for default view of dataset, or \
	     \n                       sourcename.datasetname.configname for a specific view of te dataset), or relative \
             \n                       to the environmental Mart (an error is thrown if this is not set). In addition, \
             \n                       the datasetname>martName can be used to specify the dataset (absolute or relative), \
             \n                       and mart, but this should only be used for datasets loaded from the file system. \
             \n                       Note, a using clause will not in any way affect the environmental mart and dataset, \
             \n                       but only override them for a specific query. \n\n
get=Brief Description - used to specify attributes to be returned from a query. A where clause is usually included to define \
  \n                    constraints in a filter_list so that only a subset of data is returned. \
	   \n\nUsage - <using x.y> get attribute_list <where filter_list>; \
           \n\nDetailed Description - The using clause is optional, but, if it is not present, a Dataset must \
             \n                       have been set with the 'use' or 'set' command, or the -d switch to the Shell. \
             \n                       attribute_list is a comma-separated list of mart attributes.  These \
             \n                       must match the internal_name of attributes in the DatasetConfig for \
             \n                       the mart being queried (use 'describe datasetConfigName' to get information \
             \n                       on the names of DatasetConfig elements). \
           \n\n                       The filter_list is one or more filter definitions. When more than one filter is defined, \
	     \n                       each definition is seperated by 'and'. Filters must be in one of the following formats: \
             \n                       - filter_name excluded|only  -- specifies that objects should be returned only if they match (only),\
	     \n                                                       or only if they do not match (excluded) this filter. This format\
             \n                                                       is only applicable to boolean and boolean_num type filters. \
             \n                       - filter_name =|!=|>|>=|<|<= value \
             \n                       - filter_name in list \
           \n\n                       List requests must be in one of the following formats: \
             \n                       - filter_name in path|url -- path/url must point to some  resource with ids matching the filter_name, \
             \n                                                    one per line. \
             \n                       - filter_name in (comma_separated_list of ids matching filter_name) \
             \n                                               -- Note, the list must be enclosed in parentheses, but no quoting is required. \
             \n                       - filter_name in namedProcedureName (see 'help namedProcedures' for details). \n\n
use=Brief Description - Sets the environmental dataset, and potentially, the environmental mart, or specific config for dataset \
             \n                    as well. \
	   \n\nUsage - use <sourcename.>datasetname<.configname><>martName> \
	   \n\nDetailed Description - If sourcename is a martName, or the 'datasetname>martName' syntax is used, the \
             \n                       environmental mart will be set to sourcename, or martName, respectively. \n\n
namedProcedures=Brief Description - used to store MQL commands to execute later. \
	      \n\nUsage - <using x.y> get attribute_list <where filter_list> as procedureName; \
	      \n\nDetailed Description - NamedProcedures can be used either with the execute procedure command (see help execute), or as a \
                \n                       list filter in another MQL command (see help get).  Procedures can be stored with bind variables \
	        \n                       (using the question mark '?') in place of actual strings, and these can be bound at usage \
                \n                       to specific values each time the named procedure is executed. To execute a command with bind variables, \
                \n                       either using execute, or in a list filter, append the replacement strings, in the order in which they \
                \n                       should substitute for question marks in the original MQL, separated by commas within parentheses \
                \n                       to the namedProcedureName. For examples type 'help examples'. \n\n
count_focus_from=Brief Description - returns the number of focus objects from an operation. \
	   \n\nUsage - count_focus_from MQL_query|namedProcedure|dataset_request; \
           \n\nDetailed Description - Counts the the number of focus objects that would be returned by an MQL query, namedProcedure \
             \n                       (see 'help namedProcedures'), or dataset (see 'help use' for information on the \
             \n                       dataset_request format. \n\n
